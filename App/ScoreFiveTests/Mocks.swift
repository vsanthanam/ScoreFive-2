///
/// @Generated by Mockolo
///



import Combine
import CoreData
import FiveUI
import Foundation
import NeedleFoundation
import ScoreKeeping
import SnapKit
import UIKit
@testable import ScoreFive
@testable import ShortRibs
#if canImport(CoreData)
import CoreData
import Foundation
#endif


public class PresentableInteractableMock: PresentableInteractable {
    public init() { }
    public init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

public class WorkerScopeMock: WorkerScope {
    public init() { }
    public init(isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }
}

public class InteractableMock: Interactable {
    public init() { }
    public init(isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class GamePresentableMock: GamePresentable {
    init() { }
    init(listener: GamePresentableListener? = nil, uiviewController: UIViewController = UIViewController()) {
        self.listener = listener
        self.uiviewController = uiviewController
    }


    private(set) var listenerSetCallCount = 0
    var listener: GamePresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var showNewRoundCallCount = 0
    var showNewRoundHandler: ((ViewControllable) -> ())?
    func showNewRound(_ viewController: ViewControllable)  {
        showNewRoundCallCount += 1
        if let showNewRoundHandler = showNewRoundHandler {
            showNewRoundHandler(viewController)
        }
        
    }

    private(set) var closeNewRoundCallCount = 0
    var closeNewRoundHandler: (() -> ())?
    func closeNewRound()  {
        closeNewRoundCallCount += 1
        if let closeNewRoundHandler = closeNewRoundHandler {
            closeNewRoundHandler()
        }
        
    }

    private(set) var showScoreCardCallCount = 0
    var showScoreCardHandler: ((ScoreCardViewControllable) -> ())?
    func showScoreCard(_ viewController: ScoreCardViewControllable)  {
        showScoreCardCallCount += 1
        if let showScoreCardHandler = showScoreCardHandler {
            showScoreCardHandler(viewController)
        }
        
    }

    private(set) var updateHeaderTitlesCallCount = 0
    var updateHeaderTitlesHandler: (([String]) -> ())?
    func updateHeaderTitles(_ titles: [String])  {
        updateHeaderTitlesCallCount += 1
        if let updateHeaderTitlesHandler = updateHeaderTitlesHandler {
            updateHeaderTitlesHandler(titles)
        }
        
    }
}

class MainPresentableMock: MainPresentable {
    init() { }
    init(listener: MainPresentableListener? = nil, uiviewController: UIViewController = UIViewController()) {
        self.listener = listener
        self.uiviewController = uiviewController
    }


    private(set) var listenerSetCallCount = 0
    var listener: MainPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var showFiveCallCount = 0
    var showFiveHandler: ((ViewControllable) -> ())?
    func showFive(_ viewController: ViewControllable)  {
        showFiveCallCount += 1
        if let showFiveHandler = showFiveHandler {
            showFiveHandler(viewController)
        }
        
    }
}

class RootPresentableMock: RootPresentable {
    init() { }
    init(listener: RootPresentableListener? = nil, uiviewController: UIViewController = UIViewController()) {
        self.listener = listener
        self.uiviewController = uiviewController
    }


    private(set) var listenerSetCallCount = 0
    var listener: RootPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var showMainCallCount = 0
    var showMainHandler: ((ViewControllable) -> ())?
    func showMain(_ viewControllable: ViewControllable)  {
        showMainCallCount += 1
        if let showMainHandler = showMainHandler {
            showMainHandler(viewControllable)
        }
        
    }
}

class NewRoundPresentableMock: NewRoundPresentable {
    init() { }
    init(uiviewController: UIViewController = UIViewController(), listener: NewRoundPresentableListener? = nil) {
        self.uiviewController = uiviewController
        self.listener = listener
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var listenerSetCallCount = 0
    var listener: NewRoundPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }
}

public class ViewControllableMock: ViewControllable {
    public init() { }
    public init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class FiveViewControllableMock: FiveViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class GameViewControllableMock: GameViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class HomePresentableMock: HomePresentable {
    init() { }
    init(uiviewController: UIViewController = UIViewController(), listener: HomePresentableListener? = nil) {
        self.uiviewController = uiviewController
        self.listener = listener
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var listenerSetCallCount = 0
    var listener: HomePresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    private(set) var showNewGameCallCount = 0
    var showNewGameHandler: ((ViewControllable) -> ())?
    func showNewGame(_ viewController: ViewControllable)  {
        showNewGameCallCount += 1
        if let showNewGameHandler = showNewGameHandler {
            showNewGameHandler(viewController)
        }
        
    }

    private(set) var closeNewGameCallCount = 0
    var closeNewGameHandler: (() -> ())?
    func closeNewGame()  {
        closeNewGameCallCount += 1
        if let closeNewGameHandler = closeNewGameHandler {
            closeNewGameHandler()
        }
        
    }
}

class ActiveGameStreamingMock: ActiveGameStreaming {
    init() { }
    init(activeGameIdentifier: AnyPublisher<UUID?, Never>, currentActiveGameIdentifier: UUID? = nil) {
        self._activeGameIdentifier = activeGameIdentifier
        self.currentActiveGameIdentifier = currentActiveGameIdentifier
    }


    private(set) var activeGameIdentifierSetCallCount = 0
    private var _activeGameIdentifier: AnyPublisher<UUID?, Never>!  { didSet { activeGameIdentifierSetCallCount += 1 } }
    var activeGameIdentifier: AnyPublisher<UUID?, Never> {
        get { return _activeGameIdentifier }
        set { _activeGameIdentifier = newValue }
    }

    private(set) var currentActiveGameIdentifierSetCallCount = 0
    var currentActiveGameIdentifier: UUID? = nil { didSet { currentActiveGameIdentifierSetCallCount += 1 } }
}

class NewRoundViewControllableMock: NewRoundViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class NewGamePresentableMock: NewGamePresentable {
    init() { }
    init(uiviewController: UIViewController = UIViewController(), listener: NewGamePresentableListener? = nil) {
        self.uiviewController = uiviewController
        self.listener = listener
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var listenerSetCallCount = 0
    var listener: NewGamePresentableListener? = nil { didSet { listenerSetCallCount += 1 } }
}

public class PersistentContainingMock: PersistentContaining {
    public init() { }
    public init(name: String = "", managedObejctModel: NSManagedObjectModel, persistentStoreCoordinator: NSPersistentStoreCoordinator, viewContext: NSManagedObjectContext, persistentStoreDescriptions: [NSPersistentStoreDescription] = [NSPersistentStoreDescription]()) {
        self.name = name
        self._managedObejctModel = managedObejctModel
        self._persistentStoreCoordinator = persistentStoreCoordinator
        self._viewContext = viewContext
        self.persistentStoreDescriptions = persistentStoreDescriptions
    }


    public private(set) var nameSetCallCount = 0
    public var name: String = "" { didSet { nameSetCallCount += 1 } }

    public private(set) var managedObejctModelSetCallCount = 0
    private var _managedObejctModel: NSManagedObjectModel!  { didSet { managedObejctModelSetCallCount += 1 } }
    public var managedObejctModel: NSManagedObjectModel {
        get { return _managedObejctModel }
        set { _managedObejctModel = newValue }
    }

    public private(set) var persistentStoreCoordinatorSetCallCount = 0
    private var _persistentStoreCoordinator: NSPersistentStoreCoordinator!  { didSet { persistentStoreCoordinatorSetCallCount += 1 } }
    public var persistentStoreCoordinator: NSPersistentStoreCoordinator {
        get { return _persistentStoreCoordinator }
        set { _persistentStoreCoordinator = newValue }
    }

    public private(set) var viewContextSetCallCount = 0
    private var _viewContext: NSManagedObjectContext!  { didSet { viewContextSetCallCount += 1 } }
    public var viewContext: NSManagedObjectContext {
        get { return _viewContext }
        set { _viewContext = newValue }
    }

    public private(set) var persistentStoreDescriptionsSetCallCount = 0
    public var persistentStoreDescriptions: [NSPersistentStoreDescription] = [NSPersistentStoreDescription]() { didSet { persistentStoreDescriptionsSetCallCount += 1 } }

    public private(set) var createBackgroundContextCallCount = 0
    public var createBackgroundContextHandler: (() -> (NSManagedObjectContext))?
    public func createBackgroundContext() -> NSManagedObjectContext {
        createBackgroundContextCallCount += 1
        if let createBackgroundContextHandler = createBackgroundContextHandler {
            return createBackgroundContextHandler()
        }
        fatalError("createBackgroundContextHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var saveCallCount = 0
    public var saveHandler: (() throws -> ())?
    public func save() throws  {
        saveCallCount += 1
        if let saveHandler = saveHandler {
            try saveHandler()
        }
        
    }

    public private(set) var performBackgroundTaskCallCount = 0
    public var performBackgroundTaskHandler: ((@escaping (NSManagedObjectContext) -> Void) -> ())?
    public func performBackgroundTask(_ block: @escaping (NSManagedObjectContext) -> Void)  {
        performBackgroundTaskCallCount += 1
        if let performBackgroundTaskHandler = performBackgroundTaskHandler {
            performBackgroundTaskHandler(block)
        }
        
    }
}

class MainViewControllableMock: MainViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class FivePresentableMock: FivePresentable {
    init() { }
    init(uiviewController: UIViewController = UIViewController(), listener: FivePresentableListener? = nil) {
        self.uiviewController = uiviewController
        self.listener = listener
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var listenerSetCallCount = 0
    var listener: FivePresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    private(set) var showHomeCallCount = 0
    var showHomeHandler: ((ViewControllable) -> ())?
    func showHome(_ viewController: ViewControllable)  {
        showHomeCallCount += 1
        if let showHomeHandler = showHomeHandler {
            showHomeHandler(viewController)
        }
        
    }

    private(set) var showGameCallCount = 0
    var showGameHandler: ((ViewControllable) -> ())?
    func showGame(_ viewController: ViewControllable)  {
        showGameCallCount += 1
        if let showGameHandler = showGameHandler {
            showGameHandler(viewController)
        }
        
    }
}

class ScoreCardPresentableMock: ScoreCardPresentable {
    init() { }
    init(uiviewController: UIViewController = UIViewController(), listener: ScoreCardPresentableListener? = nil) {
        self.uiviewController = uiviewController
        self.listener = listener
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var listenerSetCallCount = 0
    var listener: ScoreCardPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    private(set) var updateCallCount = 0
    var updateHandler: ((ScoreCard) -> ())?
    func update(scoreCard: ScoreCard)  {
        updateCallCount += 1
        if let updateHandler = updateHandler {
            updateHandler(scoreCard)
        }
        
    }
}

class ScoreCardViewControllableMock: ScoreCardViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class RootViewControllableMock: RootViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class HomeViewControllableMock: HomeViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class GameStorageProvidingMock: GameStorageProviding {
    init() { }


    private(set) var fetchScoreCardCallCount = 0
    var fetchScoreCardHandler: ((UUID) throws -> (ScoreCard?))?
    func fetchScoreCard(for identifier: UUID) throws -> ScoreCard? {
        fetchScoreCardCallCount += 1
        if let fetchScoreCardHandler = fetchScoreCardHandler {
            return try fetchScoreCardHandler(identifier)
        }
        return nil
    }

    private(set) var scoreCardCallCount = 0
    var scoreCardHandler: ((UUID) -> (AnyPublisher<ScoreCard?, Never>))?
    func scoreCard(for identifier: UUID) -> AnyPublisher<ScoreCard?, Never> {
        scoreCardCallCount += 1
        if let scoreCardHandler = scoreCardHandler {
            return scoreCardHandler(identifier)
        }
        fatalError("scoreCardHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var fetchGameRecordsCallCount = 0
    var fetchGameRecordsHandler: (() throws -> ([GameRecord]))?
    func fetchGameRecords() throws -> [GameRecord] {
        fetchGameRecordsCallCount += 1
        if let fetchGameRecordsHandler = fetchGameRecordsHandler {
            return try fetchGameRecordsHandler()
        }
        return [GameRecord]()
    }

    private(set) var fetchInProgressGameRecordsCallCount = 0
    var fetchInProgressGameRecordsHandler: (() throws -> ([GameRecord]))?
    func fetchInProgressGameRecords() throws -> [GameRecord] {
        fetchInProgressGameRecordsCallCount += 1
        if let fetchInProgressGameRecordsHandler = fetchInProgressGameRecordsHandler {
            return try fetchInProgressGameRecordsHandler()
        }
        return [GameRecord]()
    }
}

class NewGameViewControllableMock: NewGameViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class FivePresentableListenerMock: FivePresentableListener {
    init() { }


}

class GamePresentableListenerMock: GamePresentableListener {
    init() { }


}

class NewRoundPresentableListenerMock: NewRoundPresentableListener {
    init() { }


}

class MainPresentableListenerMock: MainPresentableListener {
    init() { }


}

class RootPresentableListenerMock: RootPresentableListener {
    init() { }


}

class ScoreCardPresentableListenerMock: ScoreCardPresentableListener {
    init() { }


}

class HomePresentableListenerMock: HomePresentableListener {
    init() { }


}

class NewGamePresentableListenerMock: NewGamePresentableListener {
    init() { }


    private(set) var didTapNewGameCallCount = 0
    var didTapNewGameHandler: (([String?], Int) -> ())?
    func didTapNewGame(with playerNames: [String?], scoreLimit: Int)  {
        didTapNewGameCallCount += 1
        if let didTapNewGameHandler = didTapNewGameHandler {
            didTapNewGameHandler(playerNames, scoreLimit)
        }
        
    }
}

class NewRoundInteractableMock: NewRoundInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class NewRoundListenerMock: NewRoundListener {
    init() { }


}

class NewGameListenerMock: NewGameListener {
    init() { }


    private(set) var newGameDidCreateNewGameCallCount = 0
    var newGameDidCreateNewGameHandler: ((UUID) -> ())?
    func newGameDidCreateNewGame(with identifier: UUID)  {
        newGameDidCreateNewGameCallCount += 1
        if let newGameDidCreateNewGameHandler = newGameDidCreateNewGameHandler {
            newGameDidCreateNewGameHandler(identifier)
        }
        
    }

    private(set) var newGameDidAbortCallCount = 0
    var newGameDidAbortHandler: (() -> ())?
    func newGameDidAbort()  {
        newGameDidAbortCallCount += 1
        if let newGameDidAbortHandler = newGameDidAbortHandler {
            newGameDidAbortHandler()
        }
        
    }
}

class MainListenerMock: MainListener {
    init() { }


}

class NewGameInteractableMock: NewGameInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class MutableActiveGameStreamingMock: MutableActiveGameStreaming {
    init() { }
    init(activeGameIdentifier: AnyPublisher<UUID?, Never>, currentActiveGameIdentifier: UUID? = nil) {
        self._activeGameIdentifier = activeGameIdentifier
        self.currentActiveGameIdentifier = currentActiveGameIdentifier
    }


    private(set) var activeGameIdentifierSetCallCount = 0
    private var _activeGameIdentifier: AnyPublisher<UUID?, Never>!  { didSet { activeGameIdentifierSetCallCount += 1 } }
    var activeGameIdentifier: AnyPublisher<UUID?, Never> {
        get { return _activeGameIdentifier }
        set { _activeGameIdentifier = newValue }
    }

    private(set) var currentActiveGameIdentifierSetCallCount = 0
    var currentActiveGameIdentifier: UUID? = nil { didSet { currentActiveGameIdentifierSetCallCount += 1 } }

    private(set) var activateGameCallCount = 0
    var activateGameHandler: ((UUID) -> ())?
    func activateGame(with uuid: UUID)  {
        activateGameCallCount += 1
        if let activateGameHandler = activateGameHandler {
            activateGameHandler(uuid)
        }
        
    }

    private(set) var deactiveateCurrentGameCallCount = 0
    var deactiveateCurrentGameHandler: (() -> ())?
    func deactiveateCurrentGame()  {
        deactiveateCurrentGameCallCount += 1
        if let deactiveateCurrentGameHandler = deactiveateCurrentGameHandler {
            deactiveateCurrentGameHandler()
        }
        
    }
}

class ScoreCardListenerMock: ScoreCardListener {
    init() { }


}

class HomeListenerMock: HomeListener {
    init() { }


    private(set) var homeWantToOpenGameCallCount = 0
    var homeWantToOpenGameHandler: ((UUID) -> ())?
    func homeWantToOpenGame(withIdentifier: UUID)  {
        homeWantToOpenGameCallCount += 1
        if let homeWantToOpenGameHandler = homeWantToOpenGameHandler {
            homeWantToOpenGameHandler(withIdentifier)
        }
        
    }
}

class MainInteractableMock: MainInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class ScoreCardInteractableMock: ScoreCardInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>, viewController: ScoreCardViewControllable = ScoreCardViewControllableMock()) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
        self.viewController = viewController
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    private(set) var viewControllerSetCallCount = 0
    var viewController: ScoreCardViewControllable = ScoreCardViewControllableMock() { didSet { viewControllerSetCallCount += 1 } }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class FiveListenerMock: FiveListener {
    init() { }


}

class NewRoundBuildableMock: NewRoundBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((NewRoundListener, Int?) -> (PresentableInteractable))?
    func build(withListener listener: NewRoundListener, replacingIndex: Int?) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener, replacingIndex)
        }
        return PresentableInteractableMock()
    }
}

class GameListenerMock: GameListener {
    init() { }


}

class NewGameBuildableMock: NewGameBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((NewGameListener) -> (PresentableInteractable))?
    func build(withListener listener: NewGameListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

public class WorkingMock: Working {
    public init() { }
    public init(isStarted: Bool = false, isStartedStream: AnyPublisher<Bool, Never>) {
        self.isStarted = isStarted
        self._isStartedStream = isStartedStream
    }


    public private(set) var startCallCount = 0
    public var startHandler: ((WorkerScope) -> ())?
    public func start(on scope: WorkerScope)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(scope)
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: (() -> ())?
    public func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    public private(set) var isStartedSetCallCount = 0
    public var isStarted: Bool = false { didSet { isStartedSetCallCount += 1 } }

    public private(set) var isStartedStreamSetCallCount = 0
    private var _isStartedStream: AnyPublisher<Bool, Never>!  { didSet { isStartedStreamSetCallCount += 1 } }
    public var isStartedStream: AnyPublisher<Bool, Never> {
        get { return _isStartedStream }
        set { _isStartedStream = newValue }
    }
}

class HomeInteractableMock: HomeInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    private(set) var newGameDidCreateNewGameCallCount = 0
    var newGameDidCreateNewGameHandler: ((UUID) -> ())?
    func newGameDidCreateNewGame(with identifier: UUID)  {
        newGameDidCreateNewGameCallCount += 1
        if let newGameDidCreateNewGameHandler = newGameDidCreateNewGameHandler {
            newGameDidCreateNewGameHandler(identifier)
        }
        
    }

    private(set) var newGameDidAbortCallCount = 0
    var newGameDidAbortHandler: (() -> ())?
    func newGameDidAbort()  {
        newGameDidAbortCallCount += 1
        if let newGameDidAbortHandler = newGameDidAbortHandler {
            newGameDidAbortHandler()
        }
        
    }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class GameStorageManagingMock: GameStorageManaging {
    init() { }


    private(set) var fetchScoreCardCallCount = 0
    var fetchScoreCardHandler: ((UUID) throws -> (ScoreCard?))?
    func fetchScoreCard(for identifier: UUID) throws -> ScoreCard? {
        fetchScoreCardCallCount += 1
        if let fetchScoreCardHandler = fetchScoreCardHandler {
            return try fetchScoreCardHandler(identifier)
        }
        return nil
    }

    private(set) var scoreCardCallCount = 0
    var scoreCardHandler: ((UUID) -> (AnyPublisher<ScoreCard?, Never>))?
    func scoreCard(for identifier: UUID) -> AnyPublisher<ScoreCard?, Never> {
        scoreCardCallCount += 1
        if let scoreCardHandler = scoreCardHandler {
            return scoreCardHandler(identifier)
        }
        fatalError("scoreCardHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var fetchGameRecordsCallCount = 0
    var fetchGameRecordsHandler: (() throws -> ([GameRecord]))?
    func fetchGameRecords() throws -> [GameRecord] {
        fetchGameRecordsCallCount += 1
        if let fetchGameRecordsHandler = fetchGameRecordsHandler {
            return try fetchGameRecordsHandler()
        }
        return [GameRecord]()
    }

    private(set) var fetchInProgressGameRecordsCallCount = 0
    var fetchInProgressGameRecordsHandler: (() throws -> ([GameRecord]))?
    func fetchInProgressGameRecords() throws -> [GameRecord] {
        fetchInProgressGameRecordsCallCount += 1
        if let fetchInProgressGameRecordsHandler = fetchInProgressGameRecordsHandler {
            return try fetchInProgressGameRecordsHandler()
        }
        return [GameRecord]()
    }

    private(set) var newGameCallCount = 0
    var newGameHandler: ((ScoreCard) throws -> (GameRecord))?
    func newGame(from scoreCard: ScoreCard) throws -> GameRecord {
        newGameCallCount += 1
        if let newGameHandler = newGameHandler {
            return try newGameHandler(scoreCard)
        }
        fatalError("newGameHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var saveCallCount = 0
    var saveHandler: ((ScoreCard, UUID) throws -> ())?
    func save(scoreCard: ScoreCard, with identifier: UUID) throws  {
        saveCallCount += 1
        if let saveHandler = saveHandler {
            try saveHandler(scoreCard, identifier)
        }
        
    }

    private(set) var saveAllGamesCallCount = 0
    var saveAllGamesHandler: (() throws -> ())?
    func saveAllGames() throws  {
        saveAllGamesCallCount += 1
        if let saveAllGamesHandler = saveAllGamesHandler {
            try saveAllGamesHandler()
        }
        
    }
}

class MainBuildableMock: MainBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((MainListener) -> (PresentableInteractable))?
    func build(withListener listener: MainListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class ScoreCardBuildableMock: ScoreCardBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((ScoreCardListener) -> (ScoreCardInteractable))?
    func build(withListener listener: ScoreCardListener) -> ScoreCardInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return ScoreCardInteractableMock()
    }
}

class HomeBuildableMock: HomeBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((HomeListener) -> (PresentableInteractable))?
    func build(withListener listener: HomeListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class GameInteractableMock: GameInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class GameBuildableMock: GameBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((GameListener) -> (PresentableInteractable))?
    func build(withListener listener: GameListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class RootInteractableMock: RootInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class RootBuildableMock: RootBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((UIWindow, PersistentContaining) -> (PresentableInteractable))?
    func build(onWindow window: UIWindow, persistentContainer: PersistentContaining) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(window, persistentContainer)
        }
        return PresentableInteractableMock()
    }
}

class FiveInteractableMock: FiveInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    private(set) var homeWantToOpenGameCallCount = 0
    var homeWantToOpenGameHandler: ((UUID) -> ())?
    func homeWantToOpenGame(withIdentifier: UUID)  {
        homeWantToOpenGameCallCount += 1
        if let homeWantToOpenGameHandler = homeWantToOpenGameHandler {
            homeWantToOpenGameHandler(withIdentifier)
        }
        
    }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class FiveBuildableMock: FiveBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((FiveListener) -> (PresentableInteractable))?
    func build(withListener listener: FiveListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

