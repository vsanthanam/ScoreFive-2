///
/// @Generated by Mockolo
///



import Combine
import CoreData
import Foundation
import NeedleFoundation
import ScoreKeeping
import SnapKit
import UIKit
@testable import ScoreFive
@testable import ShortRibs
#if canImport(CoreData)
import CoreData
import Foundation
#endif


public class PresentableInteractableMock: PresentableInteractable {
    public init() { }
    public init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

public class WorkerScopeMock: WorkerScope {
    public init() { }
    public init(isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }
}

public class InteractableMock: Interactable {
    public init() { }
    public init(isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class FivePresentableMock: FivePresentable {
    init() { }
    init(listener: FivePresentableListener? = nil, uiviewController: UIViewController = UIViewController()) {
        self.listener = listener
        self.uiviewController = uiviewController
    }


    private(set) var listenerSetCallCount = 0
    var listener: FivePresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class MainPresentableMock: MainPresentable {
    init() { }
    init(listener: MainPresentableListener? = nil, uiviewController: UIViewController = UIViewController()) {
        self.listener = listener
        self.uiviewController = uiviewController
    }


    private(set) var listenerSetCallCount = 0
    var listener: MainPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var showFiveCallCount = 0
    var showFiveHandler: ((ViewControllable) -> ())?
    func showFive(_ viewController: ViewControllable)  {
        showFiveCallCount += 1
        if let showFiveHandler = showFiveHandler {
            showFiveHandler(viewController)
        }
        
    }
}

class RootPresentableMock: RootPresentable {
    init() { }
    init(listener: RootPresentableListener? = nil, uiviewController: UIViewController = UIViewController()) {
        self.listener = listener
        self.uiviewController = uiviewController
    }


    private(set) var listenerSetCallCount = 0
    var listener: RootPresentableListener? = nil { didSet { listenerSetCallCount += 1 } }

    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }

    private(set) var showMainCallCount = 0
    var showMainHandler: ((ViewControllable) -> ())?
    func showMain(_ viewControllable: ViewControllable)  {
        showMainCallCount += 1
        if let showMainHandler = showMainHandler {
            showMainHandler(viewControllable)
        }
        
    }
}

public class ViewControllableMock: ViewControllable {
    public init() { }
    public init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class FiveViewControllableMock: FiveViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

public class PersistentContainingMock: PersistentContaining {
    public init() { }
    public init(name: String = "", managedObejctModel: NSManagedObjectModel, persistentStoreCoordinator: NSPersistentStoreCoordinator, viewContext: NSManagedObjectContext, persistentStoreDescriptions: [NSPersistentStoreDescription] = [NSPersistentStoreDescription]()) {
        self.name = name
        self._managedObejctModel = managedObejctModel
        self._persistentStoreCoordinator = persistentStoreCoordinator
        self._viewContext = viewContext
        self.persistentStoreDescriptions = persistentStoreDescriptions
    }


    public private(set) var nameSetCallCount = 0
    public var name: String = "" { didSet { nameSetCallCount += 1 } }

    public private(set) var managedObejctModelSetCallCount = 0
    private var _managedObejctModel: NSManagedObjectModel!  { didSet { managedObejctModelSetCallCount += 1 } }
    public var managedObejctModel: NSManagedObjectModel {
        get { return _managedObejctModel }
        set { _managedObejctModel = newValue }
    }

    public private(set) var persistentStoreCoordinatorSetCallCount = 0
    private var _persistentStoreCoordinator: NSPersistentStoreCoordinator!  { didSet { persistentStoreCoordinatorSetCallCount += 1 } }
    public var persistentStoreCoordinator: NSPersistentStoreCoordinator {
        get { return _persistentStoreCoordinator }
        set { _persistentStoreCoordinator = newValue }
    }

    public private(set) var viewContextSetCallCount = 0
    private var _viewContext: NSManagedObjectContext!  { didSet { viewContextSetCallCount += 1 } }
    public var viewContext: NSManagedObjectContext {
        get { return _viewContext }
        set { _viewContext = newValue }
    }

    public private(set) var persistentStoreDescriptionsSetCallCount = 0
    public var persistentStoreDescriptions: [NSPersistentStoreDescription] = [NSPersistentStoreDescription]() { didSet { persistentStoreDescriptionsSetCallCount += 1 } }

    public private(set) var createBackgroundContextCallCount = 0
    public var createBackgroundContextHandler: (() -> (NSManagedObjectContext))?
    public func createBackgroundContext() -> NSManagedObjectContext {
        createBackgroundContextCallCount += 1
        if let createBackgroundContextHandler = createBackgroundContextHandler {
            return createBackgroundContextHandler()
        }
        fatalError("createBackgroundContextHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var saveCallCount = 0
    public var saveHandler: (() throws -> ())?
    public func save() throws  {
        saveCallCount += 1
        if let saveHandler = saveHandler {
            try saveHandler()
        }
        
    }

    public private(set) var performBackgroundTaskCallCount = 0
    public var performBackgroundTaskHandler: ((@escaping (NSManagedObjectContext) -> Void) -> ())?
    public func performBackgroundTask(_ block: @escaping (NSManagedObjectContext) -> Void)  {
        performBackgroundTaskCallCount += 1
        if let performBackgroundTaskHandler = performBackgroundTaskHandler {
            performBackgroundTaskHandler(block)
        }
        
    }
}

class MainViewControllableMock: MainViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class RootViewControllableMock: RootViewControllable {
    init() { }
    init(uiviewController: UIViewController = UIViewController()) {
        self.uiviewController = uiviewController
    }


    public private(set) var uiviewControllerSetCallCount = 0
    public var uiviewController: UIViewController = UIViewController() { didSet { uiviewControllerSetCallCount += 1 } }
}

class GameStorageProvidingMock: GameStorageProviding {
    init() { }


    private(set) var fetchGameCallCount = 0
    var fetchGameHandler: ((UUID) throws -> (Game?))?
    func fetchGame(for identifier: UUID) throws -> Game? {
        fetchGameCallCount += 1
        if let fetchGameHandler = fetchGameHandler {
            return try fetchGameHandler(identifier)
        }
        return nil
    }

    private(set) var gameCallCount = 0
    var gameHandler: ((UUID) -> (AnyPublisher<Game?, Never>))?
    func game(for identifier: UUID) -> AnyPublisher<Game?, Never> {
        gameCallCount += 1
        if let gameHandler = gameHandler {
            return gameHandler(identifier)
        }
        fatalError("gameHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var fetchGamesCallCount = 0
    var fetchGamesHandler: ((Bool) throws -> ([Game]))?
    func fetchGames(inProgressOnly: Bool) throws -> [Game] {
        fetchGamesCallCount += 1
        if let fetchGamesHandler = fetchGamesHandler {
            return try fetchGamesHandler(inProgressOnly)
        }
        return [Game]()
    }
}

class FivePresentableListenerMock: FivePresentableListener {
    init() { }


}

class MainPresentableListenerMock: MainPresentableListener {
    init() { }


}

class RootPresentableListenerMock: RootPresentableListener {
    init() { }


}

class FiveListenerMock: FiveListener {
    init() { }


}

class MainListenerMock: MainListener {
    init() { }


}

class MainInteractableMock: MainInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class GameStorageManagingMock: GameStorageManaging {
    init() { }


    private(set) var fetchGameCallCount = 0
    var fetchGameHandler: ((UUID) throws -> (Game?))?
    func fetchGame(for identifier: UUID) throws -> Game? {
        fetchGameCallCount += 1
        if let fetchGameHandler = fetchGameHandler {
            return try fetchGameHandler(identifier)
        }
        return nil
    }

    private(set) var gameCallCount = 0
    var gameHandler: ((UUID) -> (AnyPublisher<Game?, Never>))?
    func game(for identifier: UUID) -> AnyPublisher<Game?, Never> {
        gameCallCount += 1
        if let gameHandler = gameHandler {
            return gameHandler(identifier)
        }
        fatalError("gameHandler returns can't have a default value thus its handler must be set")
    }

    private(set) var fetchGamesCallCount = 0
    var fetchGamesHandler: ((Bool) throws -> ([Game]))?
    func fetchGames(inProgressOnly: Bool) throws -> [Game] {
        fetchGamesCallCount += 1
        if let fetchGamesHandler = fetchGamesHandler {
            return try fetchGamesHandler(inProgressOnly)
        }
        return [Game]()
    }

    private(set) var saveGamesCallCount = 0
    var saveGamesHandler: (() throws -> ())?
    func saveGames() throws  {
        saveGamesCallCount += 1
        if let saveGamesHandler = saveGamesHandler {
            try saveGamesHandler()
        }
        
    }

    private(set) var newGameCallCount = 0
    var newGameHandler: ((ScoreCard) throws -> (Game))?
    func newGame(from scoreCard: ScoreCard) throws -> Game {
        newGameCallCount += 1
        if let newGameHandler = newGameHandler {
            return try newGameHandler(scoreCard)
        }
        fatalError("newGameHandler returns can't have a default value thus its handler must be set")
    }
}

public class WorkingMock: Working {
    public init() { }
    public init(isStarted: Bool = false, isStartedStream: AnyPublisher<Bool, Never>) {
        self.isStarted = isStarted
        self._isStartedStream = isStartedStream
    }


    public private(set) var startCallCount = 0
    public var startHandler: ((WorkerScope) -> ())?
    public func start(on scope: WorkerScope)  {
        startCallCount += 1
        if let startHandler = startHandler {
            startHandler(scope)
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: (() -> ())?
    public func stop()  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            stopHandler()
        }
        
    }

    public private(set) var isStartedSetCallCount = 0
    public var isStarted: Bool = false { didSet { isStartedSetCallCount += 1 } }

    public private(set) var isStartedStreamSetCallCount = 0
    private var _isStartedStream: AnyPublisher<Bool, Never>!  { didSet { isStartedStreamSetCallCount += 1 } }
    public var isStartedStream: AnyPublisher<Bool, Never> {
        get { return _isStartedStream }
        set { _isStartedStream = newValue }
    }
}

class MainBuildableMock: MainBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((MainListener) -> (PresentableInteractable))?
    func build(withListener listener: MainListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class FiveInteractableMock: FiveInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class FiveBuildableMock: FiveBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((FiveListener) -> (PresentableInteractable))?
    func build(withListener listener: FiveListener) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(listener)
        }
        return PresentableInteractableMock()
    }
}

class RootInteractableMock: RootInteractable {
    init() { }
    init(viewControllable: ViewControllable = ViewControllableMock(), isActive: Bool = false, isActiveStream: AnyPublisher<Bool, Never>) {
        self.viewControllable = viewControllable
        self.isActive = isActive
        self._isActiveStream = isActiveStream
    }


    public private(set) var viewControllableSetCallCount = 0
    public var viewControllable: ViewControllable = ViewControllableMock() { didSet { viewControllableSetCallCount += 1 } }

    public private(set) var activateCallCount = 0
    public var activateHandler: (() -> ())?
    public func activate()  {
        activateCallCount += 1
        if let activateHandler = activateHandler {
            activateHandler()
        }
        
    }

    public private(set) var isActiveSetCallCount = 0
    public var isActive: Bool = false { didSet { isActiveSetCallCount += 1 } }

    public private(set) var isActiveStreamSetCallCount = 0
    private var _isActiveStream: AnyPublisher<Bool, Never>!  { didSet { isActiveStreamSetCallCount += 1 } }
    public var isActiveStream: AnyPublisher<Bool, Never> {
        get { return _isActiveStream }
        set { _isActiveStream = newValue }
    }

    public private(set) var deactivateCallCount = 0
    public var deactivateHandler: (() -> ())?
    public func deactivate()  {
        deactivateCallCount += 1
        if let deactivateHandler = deactivateHandler {
            deactivateHandler()
        }
        
    }
}

class RootBuildableMock: RootBuildable {
    init() { }


    private(set) var buildCallCount = 0
    var buildHandler: ((UIWindow, PersistentContaining) -> (PresentableInteractable))?
    func build(onWindow window: UIWindow, persistentContainer: PersistentContaining) -> PresentableInteractable {
        buildCallCount += 1
        if let buildHandler = buildHandler {
            return buildHandler(window, persistentContainer)
        }
        return PresentableInteractableMock()
    }
}

